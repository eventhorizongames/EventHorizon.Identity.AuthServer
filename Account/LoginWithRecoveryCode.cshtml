@page
@model LoginWithRecoveryCodeViewModel;
@{
    ViewData["Title"] = "Recovery code verification";
}

@functions {
    public class LoginWithRecoveryCodeViewModel : PageModel 
    {
        private readonly ILogger _logger;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;

        public LoginWithRecoveryCodeViewModel(
            ILogger<LoginWithRecoveryCodeViewModel> logger,
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager
        )
        {
            _logger = logger;
            _userManager = userManager;
            _signInManager = signInManager;
        }


        [Required]
        [BindProperty]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string RecoveryCode { get; set; }
        [BindProperty]
        public string ReturnUrl { get; set; }

        public async Task OnGet(
            string returnUrl
        )
        {
            ReturnUrl = returnUrl;
            // Ensure the user has gone through the username & password screen first
            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();
            if (user == null)
            {
                throw new ApplicationException($"Unable to load two-factor authentication user.");
            }

            ViewData["ReturnUrl"] = returnUrl;
        }

        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPost()
        {
            if (!ModelState.IsValid)
            {
                return Page();
            }

            var user = await _signInManager.GetTwoFactorAuthenticationUserAsync();
            if (user == null)
            {
                throw new ApplicationException($"Unable to load two-factor authentication user.");
            }

            var recoveryCode = RecoveryCode.Replace(" ", string.Empty);

            var result = await _signInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

            if (result.Succeeded)
            {
                _logger.LogInformation("User with ID {UserId} logged in with a recovery code.", user.Id);
                return RedirectToLocal(ReturnUrl);
            }
            if (result.IsLockedOut)
            {
                _logger.LogWarning("User with ID {UserId} account locked out.", user.Id);
                return RedirectToPage("./Lockout");
            }
            else
            {
                _logger.LogWarning("Invalid recovery code entered for user with ID {UserId}", user.Id);
                ModelState.AddModelError(string.Empty, "Invalid recovery code entered.");
                return Page();
            }
        }

        private IActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToPage("/Home");
            }
        }
    }
}

<h2>@ViewData["Title"]</h2>
<hr />
<p>
    You have requested to login with a recovery code. This login will not be remembered until you provide
    an authenticator app code at login or disable 2FA and login again.
</p>
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="RecoveryCode"></label>
                <input asp-for="RecoveryCode" class="form-control" autocomplete="off" />
                <span asp-validation-for="RecoveryCode" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-default">Log in</button>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}