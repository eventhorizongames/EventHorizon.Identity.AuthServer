@page
@using EventHorizon.Identity.AuthServer.Account.Models;
@model LoginViewModel;

@functions {
    public class LoginViewModel : PageModel 
    {
        private readonly ILogger _logger;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly IIdentityServerInteractionService _interaction;
        private readonly IEventService _events;
        private readonly IAuthenticationSchemeProvider _schemeProvider;
        private readonly IClientStore _clientStore;

        public LoginViewModel(
            ILogger<LoginViewModel> logger,
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            IIdentityServerInteractionService interaction,
            IEventService events,
            IAuthenticationSchemeProvider schemeProvider,
            IClientStore clientStore
        )
        {
            _logger = logger;
            _userManager = userManager;
            _signInManager = signInManager;
            _interaction = interaction;
            _events = events;
            _schemeProvider = schemeProvider;
            _clientStore = clientStore;
        }


        [Required]
        [EmailAddress]
        [BindProperty]
        [Display(Name ="Email")]
        public string Email { get; set; }

        [Required]
        [BindProperty]
        public string Password { get; set; }
        [BindProperty]
        public bool RememberLogin { get; set; }
        [BindProperty]
        public string ReturnUrl { get; set; }
        [BindProperty]
        public bool AllowRememberLogin { get; set; } = true;
        [BindProperty]
        public bool EnableLocalLogin { get; set; } = true;

        public async Task<IActionResult> OnGet(
            string returnUrl
        )
        {
            ReturnUrl = returnUrl;
            // build a model so we know what to show on the login page
            await BuildLoginViewModelAsync();

            return Page();
        }
        
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPost(
            string button
        )
        {
            // check if we are in the context of an authorization request
            var context = await _interaction.GetAuthorizationContextAsync(ReturnUrl);

            // the user clicked the "cancel" button
            if (button != "login")
            {
                if (context != null)
                {
                    // if the user cancels, send a result back into IdentityServer as if they 
                    // denied the consent (even if this client does not require consent).
                    // this will send back an access denied OIDC error response to the client.
                    await _interaction.GrantConsentAsync(context, ConsentResponse.Denied);

                    // we can trust model.ReturnUrl since GetAuthorizationContextAsync returned non-null
                    if (await _clientStore.IsPkceClientAsync(context.ClientId))
                    {
                        // if the client is PKCE then we assume it's native, so this change in how to
                        // return the response is for better UX for the end user.
                        return RedirectToPage("Redirect", new RedirectViewModel { 
                            RedirectUrl = ReturnUrl
                        });
                    }

                    return Redirect(ReturnUrl);
                }
                else
                {
                    // since we don't have a valid context, then we just go back to the home page
                    return Redirect("~/");
                }
            }

            if (ModelState.IsValid)
            {
                // validate email/password against in-memory store
                var user = await _userManager.FindByNameAsync(Email);

                if (user != null)
                {
                    var result = await _signInManager.PasswordSignInAsync(
                        user,
                        Password, 
                        false, 
                        true
                    );
                    if (!result.Succeeded)
                    {
                        if (result.RequiresTwoFactor)
                        {
                            return RedirectToPage("./LoginWith2fa", new { 
                                ReturnUrl, 
                                RememberLogin 
                            });
                        }
                        if (result.IsLockedOut)
                        {
                            _logger.LogWarning("User account locked out.");
                            return RedirectToPage("./Lockout");
                        }
                    } else {
                        // only set explicit expiration here if user chooses "remember me". 
                        // otherwise we rely upon expiration configured in cookie middleware.
                        AuthenticationProperties props = null;
                        if (AccountOptions.AllowRememberLogin && RememberLogin)
                        {
                            props = new AuthenticationProperties
                            {
                                IsPersistent = true,
                                ExpiresUtc = DateTimeOffset.UtcNow.Add(
                                    AccountOptions.RememberMeLoginDuration
                                )
                            };
                        };

                        await _events.RaiseAsync(new UserLoginSuccessEvent(
                            user.UserName, 
                            user.Id, 
                            user.UserName
                        ));
                        // issue authentication cookie with subject ID and username
                        // await HttpContext.SignInAsync(user.Id, user.UserName, props);
                        await _signInManager.SignInAsync(user, props);

                        if (context != null)
                        {
                            if (await _clientStore.IsPkceClientAsync(context.ClientId))
                            {
                                // if the client is PKCE then we assume it's native, so this change in how to
                                // return the response is for better UX for the end user.
                                return RedirectToPage("Redirect", new RedirectViewModel { 
                                    RedirectUrl = ReturnUrl
                                });
                            }

                            // we can trust model.ReturnUrl since GetAuthorizationContextAsync returned non-null
                            return Redirect(ReturnUrl);
                        }

                        // request for a local page
                        if (Url.IsLocalUrl(ReturnUrl))
                        {
                            return Redirect(ReturnUrl);
                        }
                        else if (string.IsNullOrEmpty(ReturnUrl))
                        {
                            return Redirect("~/");
                        }
                        else
                        {
                            // user might have clicked on a malicious link - should be logged
                            throw new Exception("invalid return URL");
                        }
                    }
                }

                await _events.RaiseAsync(new UserLoginFailureEvent(
                    Email, 
                    "invalid credentials"
                ));
                ModelState.AddModelError(
                    "", 
                    AccountOptions.InvalidCredentialsErrorMessage
                );
            }

            // something went wrong, show form with error
            await BuildLoginViewModelAsync();
            return Page();
        }
        
        private async Task BuildLoginViewModelAsync()
        {
            var context = await _interaction.GetAuthorizationContextAsync(ReturnUrl);
            var schemes = await _schemeProvider.GetAllSchemesAsync();

            var allowLocal = true;
            if (context?.ClientId != null)
            {
                var client = await _clientStore.FindEnabledClientByIdAsync(context.ClientId);
                if (client != null)
                {
                    allowLocal = client.EnableLocalLogin;
                }
            }

            AllowRememberLogin = AccountOptions.AllowRememberLogin;
            EnableLocalLogin = allowLocal && AccountOptions.AllowLocalLogin;
            ReturnUrl = ReturnUrl;
            Email = context?.LoginHint;
        }
    }
}

<div class="login-page">
    <div class="page-header">
        <h1>Login</h1>
    </div>

    @await Html.PartialAsync("_ValidationSummary")

    <div class="row">

        @if (Model.EnableLocalLogin)
        {
            <div class="col-sm-offset-3 col-sm-6">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Local Login</h3>
                    </div>
                    <div class="panel-body">

                        <form id="login" asp-route="Login" method="post" >
                            <input type="hidden" asp-for="ReturnUrl" />

                            <fieldset>
                                <div class="form-group">
                                    <label asp-for="Email"></label>
                                    <input class="form-control" placeholder="Email" asp-for="Email" autofocus>
                                    <span asp-validation-for="Email" class="text-danger"></span>
                                    <p class="help-block">The email you registed with.</p>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Password"></label>
                                    <input type="password" class="form-control" placeholder="Password" asp-for="Password" autocomplete="off">
                                    <span asp-validation-for="Password" class="text-danger"></span>
                                    <div>
                                        <a asp-page="./ForgotPassword" title="Start reset process for your password.">Reset Password?</a>
                                    </div>
                                </div>
                                @if (Model.AllowRememberLogin)
                                {
                                    <div class="form-group login-remember">
                                        <label asp-for="RememberLogin">
                                            <input asp-for="RememberLogin">
                                            <strong>Remember My Login</strong>
                                        </label>
                                    </div>
                                }
                                <div class="form-group">
                                    <button class="btn btn-primary" 
                                        id="login-button" 
                                        type="submit" 
                                        name="button" 
                                        value="login"
                                    >
                                        Login
                                    </button>
                                    <button class="btn btn-default" 
                                        id="cancel-login-button" 
                                        formnovalidate
                                        name="button" 
                                        type="submit"
                                        value="cancel"
                                    >
                                        Cancel
                                    </button>
                                </div>
                                <div class="form-group">
                                    <a id="register-new-user-link" asp-page="/Register/Index" asp-route-returnurl="@Model.ReturnUrl">@("Register as a new user?")</a>
                                </div>
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        }

        @if (!Model.EnableLocalLogin)
        {
            <div class="alert alert-warning">
                <strong>Invalid login request</strong>
                There are no login schemes configured for this client.
            </div>
        }
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}