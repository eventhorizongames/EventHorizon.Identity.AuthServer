@page
@model GenerateRecoveryCodesModel;

@{
    ViewData["Title"] = "Generate two-factor authentication (2FA) recovery codes";
    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);
}

@functions {
    public class GenerateRecoveryCodesModel : PageModel {
        readonly ILogger _logger;
        readonly UserManager<ApplicationUser> _userManager;
        public GenerateRecoveryCodesModel(
            ILogger<GenerateRecoveryCodesModel> logger,
            UserManager<ApplicationUser> userManager
        )
        {
            _logger = logger;
            _userManager = userManager;
        }
        public async Task OnGet()
        {
            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            if (!user.TwoFactorEnabled)
            {
                throw new ApplicationException(
                    $"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled."
                );
            }
        }

        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPost()
        {
            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            if (!user.TwoFactorEnabled)
            {
                throw new ApplicationException(
                    $"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled."
                );
            }

            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(
                user, 
                10
            );
            _logger.LogInformation(
                "User with ID {UserId} has generated new 2FA recovery codes.", 
                user.Id
            );
 
            TempData["RecoveryCodesKey"] = recoveryCodes.ToArray();

            return RedirectToPage(
                "./ShowRecoveryCodes"
            );
        }
    }
}

<h2>@ViewData["Title"]</h2>

<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>This action generates new recovery codes.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
    <p>
        Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a asp-page="./ResetAuthenticator">reset your authenticator keys.</a>
    </p>
</div>

<div>
    <form asp-page="./GenerateRecoveryCodes" method="post" class="form-group">
        <button class="btn btn-danger" type="submit">Generate Recovery Codes</button>
    </form>
</div>
