@page
@model EnableAuthenticatorModel;

@using System.Text;
@using System.Text.Encodings.Web;

@{
    ViewData["Title"] = "Enable authenticator";
    ViewData.AddActivePage(ManageNavPages.TwoFactorAuthentication);
}

@functions {
    public class EnableAuthenticatorModel : PageModel 
    {
        private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";
        private const string RecoveryCodesKey = nameof(RecoveryCodesKey);
        
        readonly ILogger _logger;
        readonly UserManager<ApplicationUser> _userManager;
        readonly UrlEncoder _urlEncoder;
        public EnableAuthenticatorModel(
            ILogger<EnableAuthenticatorModel> logger,
            UserManager<ApplicationUser> userManager,
            UrlEncoder urlEncoder
        )
        {
            _logger = logger;
            _userManager = userManager;
            _urlEncoder = urlEncoder;
        }


        [Required]
        [BindProperty]
        [StringLength(
            7, 
            ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", 
            MinimumLength = 6
        )]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; }
        public string SharedKey { get; set; }
        public string AuthenticatorUri { get; set; }

        public async Task OnGet() 
        {
            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            await LoadSharedKeyAndQrCodeUriAsync(
                user
            );
        }
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPost() 
        {
            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            if (!ModelState.IsValid)
            {
                await LoadSharedKeyAndQrCodeUriAsync(
                    user
                );
                return Page();
            }

            // Strip spaces and hypens
            var verificationCode = Code.Replace(" ", string.Empty).Replace("-", string.Empty);

            var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(
                user, 
                _userManager.Options.Tokens.AuthenticatorTokenProvider, 
                verificationCode
            );

            if (!is2faTokenValid)
            {
                ModelState.AddModelError(
                    "Code", 
                    "Verification code is invalid."
                );
                await LoadSharedKeyAndQrCodeUriAsync(
                    user
                );
                return Page();
            }

            await _userManager.SetTwoFactorEnabledAsync(
                user, 
                true
            );
            _logger.LogInformation(
                "User with ID {UserId} has enabled 2FA with an authenticator app.", 
                user.Id
            );
            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(
                user, 
                10
            );
            TempData[RecoveryCodesKey] = recoveryCodes.ToArray();

            return RedirectToPage(
                "./ShowRecoveryCodes"
            );
        }
        private async Task LoadSharedKeyAndQrCodeUriAsync(
            ApplicationUser user
        )
        {
            var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(
                user
            );
            if (string.IsNullOrEmpty(
                unformattedKey
            ))
            {
                await _userManager.ResetAuthenticatorKeyAsync(
                    user
                );
                unformattedKey = await _userManager.GetAuthenticatorKeyAsync(
                    user
                );
            }

            SharedKey = FormatKey(
                unformattedKey
            );
            AuthenticatorUri = GenerateQrCodeUri(
                user.Email, unformattedKey
            );
        }
        private string FormatKey(
            string unformattedKey
        )
        {
            var result = new StringBuilder();
            int currentPosition = 0;
            while (currentPosition + 4 < unformattedKey.Length)
            {
                result.Append(
                    unformattedKey.Substring(
                        currentPosition, 
                        4
                    )
                ).Append(
                    " "
                );
                currentPosition += 4;
            }
            if (currentPosition < unformattedKey.Length)
            {
                result.Append(
                    unformattedKey.Substring(
                        currentPosition
                    )
                );
            }

            return result.ToString().ToLowerInvariant();
        }
        private string GenerateQrCodeUri(
            string email, 
            string unformattedKey
        )
        {
            return string.Format(
                AuthenticatorUriFormat,
                _urlEncoder.Encode("EventHorizon.Identity.Registration"),
                _urlEncoder.Encode(email),
                unformattedKey
            );
        }
    }
}

<h4>@ViewData["Title"]</h4>
<div>
    <p>To use an authenticator app go through the following steps:</p>
    <ol class="list">
        <li>
            <p>
                Download a two-factor authenticator app like Microsoft Authenticator for
                <a href="https://go.microsoft.com/fwlink/?Linkid=825071">Windows Phone</a>,
                <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> and
                <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> or
                Google Authenticator for
                <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> and
                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
            </p>
        </li>
        <li>
            <p>Scan the QR Code or enter this key <kbd>@Model.SharedKey</kbd> into your two factor authenticator app. Spaces and casing do not matter.</p>
            <div id="qrCode"></div>
            <div id="qrCodeData" data-url="@Model.AuthenticatorUri"></div>
        </li>
        <li>
            <p>
                Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <form method="post">
                        <div class="form-group">
                            <label asp-for="Code" class="control-label">Verification Code</label>
                            <input asp-for="Code" class="form-control" autocomplete="off" />
                            <span asp-validation-for="Code" class="text-danger"></span>
                        </div>
                        <button type="submit" class="btn btn-default">Verify</button>
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    </form>
                </div>
            </div>
        </li>
    </ol>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")    
    
    <script type="text/javascript" src="~/lib/qrcodejs/qrcode.min.js"></script>
    <script type="text/javascript">
        new QRCode(document.getElementById("qrCode"),
            {
                text: "@Html.Raw(Model.AuthenticatorUri)",
                width: 150,
                height: 150
            });
    </script>
}
