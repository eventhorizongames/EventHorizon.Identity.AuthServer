@page
@model IndexModel;

@using IdentityModel;
@using MediatR;
@using EventHorizon.Identity.AuthServer.Services.User;

@{
    ViewData["Title"] = "Profile";
    ViewData.AddActivePage(ManageNavPages.Index);
}
@functions {
    public class IndexModel : PageModel 
    {
        readonly UserManager<ApplicationUser> _userManager;
        readonly SignInManager<ApplicationUser> _signInManager;
        readonly IMediator _mediator;

        public IndexModel(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            IMediator mediator
        ) {
            _userManager = userManager;
            _signInManager = signInManager;
            _mediator = mediator;
        }

        [BindProperty]
        [Display(Name = "Email")]
        public string Username { get; private set; }
        [BindProperty]
        public bool IsEmailConfirmed { get; private set; }
        [BindProperty]
        public ProfileModel Profile { get; set; } = new ProfileModel();

        [TempData]
        public string StatusMessage { get; set; }

        public async Task OnGet()
        {
            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            var claimList = await _userManager.GetClaimsAsync(
                user
            );
            Username = user.UserName;
            Profile = new ProfileModel
            {
                PhoneNumber = user.PhoneNumber,
                FirstName = claimList.FirstOrDefault(
                    a => a.Type == JwtClaimTypes.GivenName
                )?.Value,
                LastName = claimList.FirstOrDefault(
                    a => a.Type == JwtClaimTypes.FamilyName
                )?.Value
            };
            IsEmailConfirmed = user.EmailConfirmed;
            StatusMessage = StatusMessage;
        }

        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPostAsync()
        {
            if (!ModelState.IsValid)
            {
                return RedirectToPage(
                    "./Index"
                );
            }

            var user = await _userManager.GetUserAsync(
                User
            );
            if (user == null)
            {
                throw new ApplicationException(
                    $"Unable to load user with ID '{_userManager.GetUserId(User)}'."
                );
            }

            var phoneNumber = user.PhoneNumber;
            if (Profile.PhoneNumber != phoneNumber)
            {
                var setPhoneResult = await _userManager.SetPhoneNumberAsync(
                    user, 
                    Profile.PhoneNumber
                );
                if (!setPhoneResult.Succeeded)
                {
                    throw new ApplicationException(
                        $"Unexpected error occurred setting phone number for user with ID '{user.Id}'."
                    );
                }
            }

            await _mediator.Publish(
                new UserSetProfileClaimsEvent(
                    user,
                    new ApplicationUserProfile
                    {
                        FirstName = Profile.FirstName,
                        LastName = Profile.LastName,
                        PhoneNumber = Profile.PhoneNumber
                    }
                )
            );

            await _signInManager.RefreshSignInAsync(
                user
            );
            
            StatusMessage = "Your profile has been updated";
            return RedirectToPage(
                "./Index"
            );
        }
    }
}

<h2 id="profile-header">@ViewData["Title"]</h2>
@await Html.PartialAsync("_StatusMessage", Model.StatusMessage)
<div class="row">
    <div class="profile col-md-6">
        <form method="POST">
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" data-selector="Username-label"></label>
                @if (Model.IsEmailConfirmed)
                {
                    <div class="input-group">
                        <input asp-for="Username" class="form-control" disabled />
                        <span class="input-group-addon" aria-hidden="true"><span class="glyphicon glyphicon-ok text-success"></span></span>
                    </div>
                }
                else
                {
                    <input asp-for="Username" class="form-control" disabled />
                    <button id="send-verification-email" type="submit" formaction="@Url.Page("./SendVerificationEmail")" class="btn btn-link">
                        Send verification email
                    </button>
                }
            </div>
            <div class="form-group">
                <label asp-for="Profile.FirstName" data-selector="Profile_FirstName-label"></label>
                <input asp-for="Profile.FirstName" class="form-control" />
                <span asp-validation-for="Profile.FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Profile.LastName" data-selector="Profile_LastName-label"></label>
                <input asp-for="Profile.LastName" class="form-control" />
                <span asp-validation-for="Profile.LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Profile.PhoneNumber" data-selector="Profile_PhoneNumber-label"></label>
                <input asp-for="Profile.PhoneNumber" class="form-control" />
                <span asp-validation-for="Profile.PhoneNumber" class="text-danger"></span>
            </div>
            <button id="save-profile" type="submit" class="btn btn-default">Save</button>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
