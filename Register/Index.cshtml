@page
@model IndexModel

@using MediatR;
@using EventHorizon.Identity.AuthServer.Services;
@using EventHorizon.Identity.AuthServer.Services.User;
@using EventHorizon.Identity.AuthServer.Register.Models;
@using EventHorizon.Identity.AuthServer.Email.Send;
@using EventHorizon.Identity.AuthServer.Captcha.Models
@using EventHorizon.Identity.AuthServer.Captcha.Validate

@{
    ViewData["Title"] = "Register";
}

@functions {
    public class IndexModel : PageModel
    {
        private static decimal Score_Threshold = 0.8m;

        private readonly UserManager<ApplicationUser> _userManager;
        private readonly SignInManager<ApplicationUser> _signInManager;
        private readonly IEmailSender _emailSender;
        private readonly ILogger _logger;
        private readonly IMediator _mediator;
        private readonly CaptchaSettings _captchaSettings;

        public IndexModel(
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            IEmailSender emailSender,
            ILogger<IndexModel> logger,
            IMediator mediator,
            CaptchaSettings captchaSettings
        )
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _emailSender = emailSender;
            _logger = logger;
            _mediator = mediator;
            _captchaSettings = captchaSettings;
        }

        [BindProperty]
        public UserRegistrationModel UserRegistration { get; set; }

        public void OnGet(
            string returnUrl
        )
        {
            ViewData["CaptchaSiteKey"] = _captchaSettings.SiteKey;
            ViewData["ReturnUrl"] = returnUrl;
        }

        public async Task<IActionResult> OnPost(
            string returnUrl = null
        )
        {
            ViewData["CaptchaSiteKey"] = _captchaSettings.SiteKey;
            ViewData["ReturnUrl"] = returnUrl;
            if (!ModelState.IsValid)
            {
                return Page();
            }
            var captchaResult = await _mediator.Send(
                new ValidateCaptchaCommand(
                    UserRegistration.CaptchaToken
                )
            );
            if (!captchaResult.Success
                || captchaResult.Score < Score_Threshold)
            {
                ModelState.AddModelError(
                    string.Empty,
                    $"Failed Bot check, are you sure your not a bot."
                );
                return Page();
            }
            var user = new ApplicationUser
            {
                UserName = UserRegistration.Email,
                Email = UserRegistration.Email
            };
            var result = await _mediator.Send(
                new UserCreateEvent
                {
                    User = user,
                    Profile = new ApplicationUserProfile
                    {
                        PhoneNumber = UserRegistration.Profile.PhoneNumber,
                        FirstName = UserRegistration.Profile.FirstName,
                        LastName = UserRegistration.Profile.LastName,
                    },
                    Password = UserRegistration.Password
                });

            if (result.Succeeded)
            {
                _logger.LogInformation(
                    "New User Account created. {UserId}",
                    user.Id
                );

                var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                await _mediator.Send(
                    new SendConfirmationEmail(
                        user.Email,
                        Url.EmailConfirmationLink(
                            user.Id,
                            code,
                            Request.Scheme
                        )
                    )
                );

                await _signInManager.SignInAsync(user, isPersistent: false);

                return RedirectToLocal(
                    returnUrl ?? "/"
                );
            }
            AddErrors(result);

            // If we got this far, something failed, redisplay form
            return Page();
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
            }
        }

        private IActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToPage("/Home");
            }
        }
    }
}

<h1 id="page-title">@ViewData["Title"]</h1>

<div class="row">
    <form id="registration-form"
          name="registration-form"
          class="registration-form"
          asp-route-returnUrl="@ViewData["ReturnUrl"]"
          method="post">
        <div class="col-md-12">
            <h2 id="page-description">Create a new account.</h2>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
        </div>
        <div class="col-md-4">
            <h3 id="user-details">Account Details</h3>
            <hr />
            <div class="form-group">
                <label asp-for="UserRegistration.Email"></label>
                <input asp-for="UserRegistration.Email" class="form-control" />
                <span asp-validation-for="UserRegistration.Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserRegistration.Password"></label>
                <input asp-for="UserRegistration.Password" class="form-control" />
                <span asp-validation-for="UserRegistration.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserRegistration.ConfirmPassword"></label>
                <input asp-for="UserRegistration.ConfirmPassword" class="form-control" />
                <span asp-validation-for="UserRegistration.ConfirmPassword" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-1"></div>
        <div class="col-md-4">
            <h3 id="user-profile">Account Profile</h3>
            <hr />
            <div class="form-group">
                <label asp-for="UserRegistration.Profile.FirstName"></label>
                <input asp-for="UserRegistration.Profile.FirstName" class="form-control" />
                <span asp-validation-for="UserRegistration.Profile.FirstName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserRegistration.Profile.LastName"></label>
                <input asp-for="UserRegistration.Profile.LastName" class="form-control" />
                <span asp-validation-for="UserRegistration.Profile.LastName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserRegistration.Profile.PhoneNumber"></label>
                <input asp-for="UserRegistration.Profile.PhoneNumber" class="form-control" />
                <span asp-validation-for="UserRegistration.Profile.PhoneNumber" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-12">
            <input id="CaptchaToken" asp-for="UserRegistration.CaptchaToken" type="hidden" />
            <div class="form-group">
                <label asp-for="UserRegistration.AcceptServiceAgreements">
                    <input asp-for="UserRegistration.AcceptServiceAgreements" type="checkbox" /> Accept <a class="link" href="https://ehzgames.studio/terms-of-service" target="_blank">Terms of Service</a> and <a class="link" href="https://ehzgames.studio/privacy-policy" target="_blank">Privacy Policy</a>
                </label>
                <br />
                <span asp-validation-for="UserRegistration.AcceptServiceAgreements" class="text-danger"></span>
            </div>
            <button class="btn btn-default g-recaptcha"
                    data-sitekey="@ViewData["CaptchaSiteKey"]"
                    data-callback="onRegistrationSubmit"
                    data-action="auth/registration">
                Register
            </button>
        </div>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        function onRegistrationSubmit(token) {
            document.getElementById("CaptchaToken").value = token;
            document.getElementById("registration-form").submit();
        }
    </script>
}
